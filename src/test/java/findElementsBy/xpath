$x("/html/body/button")
$x("/html/body/p")
$x("/html/body/button[1]")
$x("//*")                     wszystkie tagi na stronie

$x("//tr")          szukamy w całej strukturze a nie tylko schodkowo po elementach -> // podwojny /
$x("/html/body/table//tr")

/html/body/button[@id='clickOnMe']      button z danym ID
//button[@id='clickOnMe']               button na calej stronie z danym id


//input[@name = 'fname']                input z name 'fname'

//p[@class = 'topSecret']               paragraf z dana klasa

/a[text()= 'Visit W3Schools.com!']      link z danym tekstem
//a[contains(text(),'Visit')]           link z częścią danego tekstu

$x("(//input)[2]")                      drugi input na stronie
$x("(//input)[last()]")                 ostatni input na stronie

$x("//*[@name = 'fname']")              dowolny element an stronie z name = fname
$x("//*[@name]")                        dowolny element na stronie, kóry posiada atrybut name
$x("//*[@id]")                          dowolny element na stronie, kóry posiada atrybut id
$x("//button[@id]")                     buttony, które posiadaja atrybut id
$x("(//button[@id])[1]")                drugi button na stronie, który zawiera atrybut id

$x("//button[@id!='clickOnMe']")        buttony, których wartość id nie jest 'clickOnMe'
$x("//*[@id!='clickOnMe']")             wszystkie elementy, ktorych id nie jest 'clickOnMe'
$x("//*[contains(@name, 'ame')]")       wszystkie elementy, ktorych atrybut name zawiera text 'ame'
$x("//*[starts-with(@name, 'f')]")      wszytskie lelemnty, ktorych atrybut name zaczyna się od 'f'
$x("//*[ends-with(@name, 'e')]")        ta metoda może nie dzialac
$x("//*[substring(@name,string-length(@name)-string-length('ame')+1)]")     konczy się na 'ame'


RODZINA W XPATH

$x("//div/child::ul")                   szukanie ul, które jest dzieckiem diva
$x("//div//ul")                         wszystkie tagi ul w div
$x("//div/descendant::ul")             szukamy wszystkich zstepnych - dzieci typu ul, ale tez 'wnuków'  typu ul
$x("//div/descendant::*")              szukamy wszystkich zstepnych
$x("//div/ancestor::*")                szukamy tagów wstępnych - nad tagiem div "rodziców i dziadków"
$x("//div/ancestor::body")
$x("//div/..")                         szuka bezpośredniego rodzica
$x("//div/../..")                      szuka dziadka

$x("//img/following::*")                wszystki tagi po obrazku - nie tylko rodzeństwo, ale też elementy zagnieżdżone (dzieci rodzeństwa)
$x("//img/following-sibling::*")        tagi, które znajdują sie w strukturze na tym samym poziomie po obrazku - rodzeństwo
$x("//img/preceding::*")                wszytskie tagi przed obrazkiem
$x("//img/preceding-sibling::*")        tagi, które znajdują sie w strukturze na tym samym poziomie przed obeazkiem


OPERATORY W XPATH

$x("//a | // input")                                szuka linków oraz inputów
$x("//a | // input")
$x("//input[@name = 'fname' and @id = 'fname']")        szuka inputu, ktorego wartość atrybutu name - fname i wartość id = fname
$x("//input[@name = 'fname' or @id = 'fname']")         szuka inputu, ktorego wartość atrybutu name - fname lub wartość id = fname




NOTES:
- trzeba sprawdzać czy ID nie jest automatycznie generowane przy każdym refreshu strony
- xpath jest najwolniejszy - więc jeśli się da inaczej to lepiej inaczej
- tylko xpath potrafi sie odwolać do elementu wyżej, czyli do rodzica
- tylko xpath potrafi sie odwolać do tagu, który posiada jakiś text




